const { users } = require('../config/db-simple');

// Simple in-memory storage for contact messages (in production, use a database)
let contactMessages = [
    {
        _id: '1',
        name: '–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤',
        email: 'ivan.petrov@example.com',
        subject: '–í—ä–ø—Ä–æ—Å –∑–∞ —Ä–µ—Ü–µ–ø—Ç–∞—Ç–∞ –∑–∞ –±–∞–Ω–∏—Ü–∞',
        message: '–ó–¥—Ä–∞–≤–µ–π—Ç–µ! –ò—Å–∫–∞–º –¥–∞ –ø–æ–ø–∏—Ç–∞–º –∫–∞–∫ –¥–∞ –Ω–∞–ø—Ä–∞–≤—è –±–∞–Ω–∏—Ü–∞—Ç–∞ –ø–æ-—Ö—Ä—É–ø–∫–∞–≤–∞. –ò–º–∞—Ç–µ –ª–∏ —Å—ä–≤–µ—Ç–∏?',
        topic: 'cooking',
        userId: null,
        submittedAt: new Date(Date.now() - 86400000).toISOString(), // 1 day ago
        status: 'new',
        readAt: null,
        repliedAt: null
    },
    {
        _id: '2',
        name: '–ú–∞—Ä–∏—è –ì–µ–æ—Ä–≥–∏–µ–≤–∞',
        email: 'maria.georgieva@example.com',
        subject: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∑–∞ –∫—É—Ä—Å–æ–≤–µ—Ç–µ',
        message: '–ó–¥—Ä–∞–≤–µ–π—Ç–µ! –ò—Å–∫–∞–º –¥–∞ —Å–µ –∑–∞–ø–∏—à–∞ –∑–∞ –∫—É—Ä—Å–∞ –ø–æ –≥–æ—Ç–≤–µ–Ω–µ. –ö–æ–≥–∞ –∑–∞–ø–æ—á–≤–∞ —Å–ª–µ–¥–≤–∞—â–∏—è—Ç?',
        topic: 'courses',
        userId: null,
        submittedAt: new Date(Date.now() - 172800000).toISOString(), // 2 days ago
        status: 'read',
        readAt: new Date(Date.now() - 86400000).toISOString(),
        repliedAt: null
    },
    {
        _id: '3',
        name: '–ü–µ—Ç—ä—Ä –î–∏–º–∏—Ç—Ä–æ–≤',
        email: 'petar.dimitrov@example.com',
        subject: '–°—ä–≤–µ—Ç –∑–∞ –≥–æ—Ç–≤–µ–Ω–µ –Ω–∞ —Ä–∏–±–∞',
        message: '–ó–¥—Ä–∞–≤–µ–π—Ç–µ! –ò–º–∞—Ç–µ –ª–∏ —Å—ä–≤–µ—Ç–∏ –∫–∞–∫ –¥–∞ –≥–æ—Ç–≤—è —Ä–∏–±–∞, –∑–∞ –¥–∞ –Ω–µ —Å–µ —Ä–∞–∑–ø–∞–¥–∞?',
        topic: 'tips',
        userId: null,
        submittedAt: new Date(Date.now() - 259200000).toISOString(), // 3 days ago
        status: 'replied',
        readAt: new Date(Date.now() - 172800000).toISOString(),
        repliedAt: new Date(Date.now() - 86400000).toISOString(),
        adminReply: '–ó–¥—Ä–∞–≤–µ–π—Ç–µ! –ó–∞ –¥–∞ –Ω–µ —Å–µ —Ä–∞–∑–ø–∞–¥–∞ —Ä–∏–±–∞—Ç–∞, —è –≥–æ—Ç–≤–µ—Ç–µ –Ω–∞ —Å—Ä–µ–¥–Ω–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∏ –Ω–µ —è –æ–±—Ä—ä—â–∞–π—Ç–µ —á–µ—Å—Ç–æ. –ò–∑–ø–æ–ª–∑–≤–∞–π—Ç–µ —Ç–∏–≥–∞–Ω —Å —Ç–µ—Ñ–ª–æ–Ω–æ–≤–æ –ø–æ–∫—Ä–∏—Ç–∏–µ –∏ –¥–æ–±–∞–≤–µ—Ç–µ –º–∞–ª–∫–æ –±—Ä–∞—à–Ω–∞ –ø—Ä–µ–¥–∏ –≥–æ—Ç–≤–µ–Ω–µ.'
    }
];

// Submit a contact message
function submitContact(req, res, next) {
    console.log('üîç submitContact called with body:', req.body);
    try {
        const { name, email, subject, message, topic, userId } = req.body;

        // Validate required fields
        if (!name || !email || !subject || !message) {
            return res.status(400).json({
                error: 'Missing required fields',
                message: '–ú–æ–ª—è, –ø–æ–ø—ä–ª–Ω–µ—Ç–µ –≤—Å–∏—á–∫–∏ –∑–∞–¥—ä–ª–∂–∏—Ç–µ–ª–Ω–∏ –ø–æ–ª–µ—Ç–∞.'
            });
        }

        // Validate email format
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        if (!emailRegex.test(email)) {
            return res.status(400).json({
                error: 'Invalid email format',
                message: '–ú–æ–ª—è, –≤—ä–≤–µ–¥–µ—Ç–µ –≤–∞–ª–∏–¥–µ–Ω –∏–º–µ–π–ª –∞–¥—Ä–µ—Å.'
            });
        }

        // Create contact message
        const contactMessage = {
            _id: Date.now().toString(),
            name,
            email,
            subject,
            message,
            topic: topic || 'general',
            userId: userId || null,
            submittedAt: new Date().toISOString(),
            status: 'new', // new, read, replied, archived
            readAt: null,
            repliedAt: null
        };

        contactMessages.push(contactMessage);

        console.log(`‚úÖ New contact message received from ${name} (${email})`);
        console.log(`üìù Subject: ${subject}`);
        console.log(`üè∑Ô∏è Topic: ${topic}`);

        res.status(201).json({
            message: 'Contact message submitted successfully',
            contactId: contactMessage._id
        });
    } catch (error) {
        console.error('‚ùå Error in submitContact:', error);
        next(error);
    }
}

// Get all contact messages (admin only)
function getAllContactMessages(req, res, next) {
    console.log('üîç getAllContactMessages called');
    try {
        console.log('üîç getAllContactMessages called by user:', req.user?.username);
        console.log('üîç User role:', req.user?.role);
        console.log('üîç Available contact messages:', contactMessages.length);

        // Sort by submission date (newest first)
        const sortedMessages = [...contactMessages].sort((a, b) =>
            new Date(b.submittedAt) - new Date(a.submittedAt)
        );

        console.log(`‚úÖ Admin: Retrieved ${sortedMessages.length} contact messages`);
        res.json({ messages: sortedMessages });
    } catch (error) {
        console.error('‚ùå Error in getAllContactMessages:', error);
        next(error);
    }
}

// Get contact message by ID (admin only)
function getContactMessageById(req, res, next) {
    try {
        const { id } = req.params;
        const message = contactMessages.find(m => m._id === id);

        if (!message) {
            return res.status(404).json({ error: 'Contact message not found' });
        }

        // Mark as read if not already read
        if (!message.readAt) {
            message.readAt = new Date().toISOString();
            message.status = 'read';
        }

        res.json({ message });
    } catch (error) {
        console.error('‚ùå Error in getContactMessageById:', error);
        next(error);
    }
}

// Update contact message status (admin only)
function updateContactMessageStatus(req, res, next) {
    try {
        const { id } = req.params;
        const { status, adminReply } = req.body;

        const messageIndex = contactMessages.findIndex(m => m._id === id);
        if (messageIndex === -1) {
            return res.status(404).json({ error: 'Contact message not found' });
        }

        const message = contactMessages[messageIndex];

        if (status) {
            message.status = status;
        }

        if (adminReply) {
            message.adminReply = adminReply;
            message.repliedAt = new Date().toISOString();
            message.status = 'replied';

            // Create notification for the user about the admin reply
            if (message.userId) {
                console.log(`üîî Creating notification for user ${message.userId} about admin reply`);
                createContactReplyNotification(message.userId, message._id, message.subject, adminReply);
            } else {
                console.log(`‚ö†Ô∏è No userId found for contact message ${id}, cannot create notification`);
            }
        }

        console.log(`‚úÖ Contact message ${id} status updated to ${message.status}`);
        res.json({ message });
    } catch (error) {
        console.error('‚ùå Error in updateContactMessageStatus:', error);
        next(error);
    }
}

// Delete contact message (admin only)
function deleteContactMessage(req, res, next) {
    try {
        const { id } = req.params;
        const messageIndex = contactMessages.findIndex(m => m._id === id);

        if (messageIndex === -1) {
            return res.status(404).json({ error: 'Contact message not found' });
        }

        const deletedMessage = contactMessages.splice(messageIndex, 1)[0];
        console.log(`‚úÖ Contact message ${id} deleted`);

        res.json({ message: 'Contact message deleted successfully' });
    } catch (error) {
        console.error('‚ùå Error in deleteContactMessage:', error);
        next(error);
    }
}

// Get user's own contact messages
function getUserContactMessages(req, res, next) {
    try {
        const { userId } = req.params;

        if (!userId) {
            return res.status(400).json({ error: 'User ID is required' });
        }

        // Get messages for this specific user
        const userMessages = contactMessages.filter(m => m.userId === userId);

        console.log(`üîç User ${userId} requested their contact messages. Found: ${userMessages.length}`);

        res.json({ messages: userMessages });
    } catch (error) {
        console.error('‚ùå Error in getUserContactMessages:', error);
        next(error);
    }
}

// Get all contact messages (for internal use)
function getContactMessages() {
    return contactMessages;
}

// Get contact statistics (admin only)
function getContactStats(req, res, next) {
    try {
        const totalMessages = contactMessages.length;
        const newMessages = contactMessages.filter(m => m.status === 'new').length;
        const readMessages = contactMessages.filter(m => m.status === 'read').length;
        const repliedMessages = contactMessages.filter(m => m.status === 'replied').length;
        const archivedMessages = contactMessages.filter(m => m.status === 'archived').length;

        const stats = {
            total: totalMessages,
            new: newMessages,
            read: readMessages,
            replied: repliedMessages,
            archived: archivedMessages
        };

        console.log(`‚úÖ Contact stats retrieved: ${totalMessages} total messages`);
        res.json(stats);
    } catch (error) {
        console.error('‚ùå Error in getContactStats:', error);
        next(error);
    }
}

// Create a contact reply notification
function createContactReplyNotification(userId, messageId, subject, adminReply) {
    try {
        // Use the proper notification service
        const NotificationService = require('../utils/notificationService');

        NotificationService.createNotification(userId, 'contact_reply', {
            contactMessageId: messageId,
            contactSubject: subject,
            adminReply: adminReply,
            message: `–ì–æ—Ç–≤–∞—á—ä—Ç –æ—Ç–≥–æ–≤–æ—Ä–∏ –Ω–∞ –≤–∞—à–µ—Ç–æ —Å—ä–æ–±—â–µ–Ω–∏–µ "${subject}"`
        });

        console.log(`‚úÖ Contact reply notification created for user ${userId}`);
        console.log(`üìß Subject: ${subject}`);

    } catch (error) {
        console.error('‚ùå Error creating contact reply notification:', error);
    }
}

module.exports = {
    submitContact,
    getAllContactMessages,
    getContactMessageById,
    updateContactMessageStatus,
    deleteContactMessage,
    getContactStats,
    getUserContactMessages,
    createContactReplyNotification,
    getContactMessages
};
